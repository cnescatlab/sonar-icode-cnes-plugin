<?xml version="1.0" encoding="UTF-8"?>
<icodelint-rules>
	<rule>
		<key>Parsing Error</key>
		<name>Parsing Error</name>
		<internalKey>*</internalKey>
		<description>An error occurs when parsing a file.</description>
		<severity>BLOCKER</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>BUG</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>COM.DATA.FloatCompare</key>
		<name>COM.DATA.FloatCompare</name>
		<internalKey>*</internalKey>
		<description>Equality and non equality (.EQ., ==, .NE., /=) are forbidden on reals (REAL, DOUBLE PRECISION, COMPLEX).</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>COM.DATA.Initialisation</key>
		<name>COM.DATA.Initialisation</name>
		<internalKey>*</internalKey>
		<description>Variables have to be initialized before being used. When a variable is used, the algorithm should checked if it is initialized and if not throw an error.</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>COM.DATA.Invariant</key>
		<name>COM.DATA.Invariant</name>
		<internalKey>*</internalKey>
		<description>Data declared into subroutine, function, ... and which are never modified then should be declared as constant.</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>COM.DATA.LoopCondition</key>
		<name>COM.DATA.LoopCondition</name>
		<internalKey>*</internalKey>
		<description>It is forbidden to modify loop condition inside the loop.</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>COM.DATA.NotUsed</key>
		<name>COM.DATA.NotUsed</name>
		<internalKey>*</internalKey>
		<description>Every declared variable should be used.</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>COM.DESIGN.Alloc</key>
		<name>COM.DESIGN.Alloc</name>
		<internalKey>*</internalKey>
		<description>Allocation and desallocation of ressources should be in the same level. For each “DEALLOCATE” keyword found, i-Code CNES checks that the keyword “ALLOCATE” is also found and checks that they are relative to the same resource.</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>COM.DESIGN.ActiveWait</key>
		<name>COM.DESIGN.ActiveWait</name>
		<internalKey>*</internalKey>
		<description>In a loop, SLEEP, WAIT and PAUSE instructions are forbidden.</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>COM.FLOW.Abort</key>
		<name>COM.FLOW.Abort</name>
		<internalKey>*</internalKey>
		<description>Keyword STOP is forbidden.</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>COM.FLOW.BooleanExpression</key>
		<name>COM.FLOW.BooleanExpression</name>
		<internalKey>*</internalKey>
		<description>In a condition (IF,DO), maximum number of operands is 5 (AND, OR, NEQV, XOR, EQV, NOT, LT, &lt;, LE, &lt;=, GT, &gt;, GE, &gt;=, EQ, ==, NE, /=).</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>COM.FLOW.CheckCodeReturn</key>
		<name>COM.FLOW.CheckCodeReturn</name>
		<internalKey>*</internalKey>
		<description>Function return values should be checked.</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>COM.FLOW.CheckUser</key>
		<name>COM.FLOW.CheckUser</name>
		<internalKey>*</internalKey>
		<description>The identity of the user running the program should be checked.</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>COM.FLOW.Exit</key>
		<name>COM.FLOW.Exit</name>
		<internalKey>*</internalKey>
		<description>Function, procedure and method should have a unique exit point.</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>COM.FLOW.ExitLoop</key>
		<name>COM.FLOW.ExitLoop</name>
		<internalKey>*</internalKey>
		<description>Function, procedure and method should have a unique exit point.</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>COM.FLOW.FileExistence</key>
		<name>COM.FLOW.FileExistence</name>
		<internalKey>*</internalKey>
		<description>File opening (OPEN, READ, WRITE) should be done after using INQUIRE and EXIST instruction of this file.</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>COM.FLOW.FilePath</key>
		<name>COM.FLOW.FilePath</name>
		<internalKey>*</internalKey>
		<description>In the OPEN instruction, it is forbidden to use directly the file name (file.txt). Path should be defined through a variable.</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>COM.INST.BoolNegation</key>
		<name>COM.INST.BoolNegation</name>
		<internalKey>*</internalKey>
		<description>Double negation is forbidden on Boolean expressions. Negations are defined with the keyword « NOT ». Following expressions are not allowed:
			NOT. (.NOT. a)		-> ( a )
			.NOT. ( a .AND. .NOT. b)	-> .NOT. a .OR. b</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>COM.INST.Brace</key>
		<name>COM.INST.Brace</name>
		<internalKey>*</internalKey>
		<description>Every expression should be braced.</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>COM.INST.CodeComment</key>
		<name>COM.INST.CodeComment</name>
		<internalKey>*</internalKey>
		<description>Commented code is forbidden. i-Code CNES checks all keywords in comments, except in the header.</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>COM.INST.GoTo</key>
		<name>COM.INST.GoTo</name>
		<internalKey>*</internalKey>
		<description>"GO TO" is forbidden.</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>COM.INST.LoopCondition</key>
		<name>COM.INST.LoopCondition</name>
		<internalKey>*</internalKey>
		<description>In a loop instruction, comparison using (.EQ., ==, .NE., \=) are forbidden.</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>COM.NAME.Homonymy</key>
		<name>COM.NAME.Homonymy</name>
		<internalKey>*</internalKey>
		<description>Variable name should be unique.</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>COM.PROJECT.Header</key>
		<name>COM.PROJECT.Header</name>
		<internalKey>*</internalKey>
		<description>Headers are mandatory for each module and function.</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>COM.PRES.Indent</key>
		<name>COM.PRES.Indent</name>
		<internalKey>*</internalKey>
		<description>Source code should be indented with spaces:
			DO i = 2, nb
			    somme = somme + x(i)
			    IF (isnan(somme)) THEN
			        print *, 'somme is a NaN'
			        moy = -1.0
			    END IF
			END DO
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>COM.PRES.LengthLine</key>
		<name>COM.PRES.LengthLine</name>
		<internalKey>*</internalKey>
		<description>A line of source code should contain 100 characters maximum.</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>COM.TYPE.Expression</key>
		<name>COM.TYPE.Expression</name>
		<internalKey>*</internalKey>
		<description>In a expression (defined by operator like +, -, /, *, **) all variables should have the same type : REAL, INTEGER, …</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>F77.BLOC.Common</key>
		<name>F77.BLOC.Common</name>
		<internalKey>*</internalKey>
		<description>White COMMON are forbidden.</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>F77.BLOC.Else</key>
		<name>F77.BLOC.Else</name>
		<internalKey>*</internalKey>
		<description>In an instruction IF, the last ELSE IF should be follow by ELSE.</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>F77.BLOC.Function</key>
		<name>F77.BLOC.Function</name>
		<internalKey>*</internalKey>
		<description>Parameter’s braces should be used when defining a FUNCTION whenever there is no parameter.</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>F77.BLOC.Loop</key>
		<name>F77.BLOC.Loop</name>
		<internalKey>*</internalKey>
		<description>Nested DO loop should have different end instructions (one for each).</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>F77.DATA.Array</key>
		<name>F77.DATA.Array</name>
		<internalKey>*</internalKey>
		<description>Arrays dimension should be declared explicitly. The use of * is tolerated for the last one if justified with a comment.</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>F77.DATA.Common</key>
		<name>F77.DATA.Common</name>
		<internalKey>*</internalKey>
		<description>INCLUDE must be used to declare COMMON in program units referencing it.</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>F77.DATA.Double</key>
		<name>F77.DATA.Double</name>
		<internalKey>*</internalKey>
		<description>In a constant initialisation or in an expression evaluation, the use of (D) (as double precision is mandatory.</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>F77.DATA.Initialisation</key>
		<name>F77.DATA.Initialisation</name>
		<internalKey>*</internalKey>
		<description>Variable initialisation should be done using DATA or BLOCKDATA.</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>F77.DATA.IO</key>
		<name>F77.DATA.IO</name>
		<internalKey>*</internalKey>
		<description>Implicit logical units defined by * are forbidden.</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>F77.DATA.LoopDO</key>
		<name>F77.DATA.LoopDO</name>
		<internalKey>*</internalKey>
		<description>DO loop condition parameter should use INTEGER.</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>F77.DATA.Parameter</key>
		<name>F77.DATA.Parameter</name>
		<internalKey>*</internalKey>
		<description>The use of constants, computed values or function calls as function parameters is forbidden.</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>F77.ERR.OpenRead</key>
		<name>F77.ERR.OpenRead</name>
		<internalKey>*</internalKey>
		<description>The check of return status for instructions OPEN and READ is mandatory. It is recommended to use “IOSTAT = “ to do it.</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>F77.INST.Assign</key>
		<name>F77.INST.Assign</name>
		<internalKey>*</internalKey>
		<description>ASSIGN instruction is forbidden.</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>F77.INST.Dimension</key>
		<name>F77.INST.Dimension</name>
		<internalKey>*</internalKey>
		<description>DIMENSION instruction is forbidden.</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>F77.INST.Equivalence</key>
		<name>F77.INST.Equivalence</name>
		<internalKey>*</internalKey>
		<description>EQUIVALENCE instruction is forbidden.</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>F77.INST.Function</key>
		<name>F77.INST.Function</name>
		<internalKey>*</internalKey>
		<description>FUNCTION instruction should be used with an explicite type declaration, at function definition.</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>F77.INST.If</key>
		<name>F77.INST.If</name>
		<internalKey>*</internalKey>
		<description>Arithmetic IF is forbidden.</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>F77.INST.Include</key>
		<name>F77.INST.Include</name>
		<internalKey>*</internalKey>
		<description>If instruction INCLUDE is used, the included file should not contain executable instructions. (ASSIGN, GOTO, IF, ELSE, CONTINUE, STOP, PAUSE ; DO, READ, WRITE, PRINT, REWIND ; BACKSPACE, ENDFILE, OPEN, CLOSE, INQUIER, CALL, RETURN, END).</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>F77.INST.Pause</key>
		<name>F77.INST.Pause</name>
		<internalKey>*</internalKey>
		<description>PAUSE instruction is forbidden.</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>F77.INST.Return</key>
		<name>F77.INST.Return</name>
		<internalKey>*</internalKey>
		<description>RETURN(i) instruction is forbidden in subprogram.</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>F77.INST.Save</key>
		<name>F77.INST.Save</name>
		<internalKey>*</internalKey>
		<description>SAVE instruction is forbidden except for local variables with justification in a comment.</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>F77.MET.Line</key>
		<name>F77.MET.Line</name>
		<internalKey>*</internalKey>
		<description>Each line should contain less than 72 characters.</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>F77.NAME.GenericIntrinsic</key>
		<name>F77.NAME.GenericIntrinsic</name>
		<internalKey>*</internalKey>
		<description>The use of generic names for intrinseque functions is mandatory.</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>F77.NAME.Intrinsic</key>
		<name>F77.NAME.Intrinsic</name>
		<internalKey>*</internalKey>
		<description>Intrinsic function names reuse is forbidden.</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>F77.NAME.KeyWords</key>
		<name>F77.NAME.KeyWords</name>
		<internalKey>*</internalKey>
		<description>Fortran 77 keywords should not be reused for variable names.</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>F77.NAME.Label</key>
		<name>F77.NAME.Label</name>
		<internalKey>*</internalKey>
		<description>Label usage is restricted to instruction FORMAT and CONTINUE.</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>F77.PROTO.Declaration</key>
		<name>F77.PROTO.Declaration</name>
		<internalKey>*</internalKey>
		<description>External functions should be declared with EXTERNAL keyword.</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>F77.REF.IO</key>
		<name>F77.REF.IO</name>
		<internalKey>*</internalKey>
		<description>Logical unit should be identified with symbolic name.</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>F77.REF.Open</key>
		<name>F77.REF.Open</name>
		<internalKey>*</internalKey>
		<description>OPEN parameters FILE, STATUS and POSITION should be defined.</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>F77.REF.Parameter</key>
		<name>F77.REF.Parameter</name>
		<internalKey>*</internalKey>
		<description>It is forbidden to set as subroutine parameter variables which are already in a COMMON bloc accessible from the subroutine and the program which calls it.</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>F77.TYPE.Basic</key>
		<name>F77.TYPE.Basic</name>
		<internalKey>*</internalKey>
		<description>Only standard types (INTEGER, REAL, DOUBLE PRECISION, COMPLEX, LOGICAL, CHARACTER) are allowed.</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>F77.TYPE.Hollerith</key>
		<name>F77.TYPE.Hollerith</name>
		<internalKey>*</internalKey>
		<description>Data and constant of type Hollerith are forbidden.</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
</icodelint-rules>